loop = false #for inf loop

#the most important change to be made, functionally, is the addition of 'trycatch' functions to prevent strings being entered where integers are expected.

#----------STORAGE----------
playerscores = {
  James: 255,
  Matthew: 745,
  Rachel: 102,
  Alix: 427,
  Tim: 1
}

#----------METHODS----------

def rankcalc(score) #calculates the rank of a player in 250 point boundaries (i.e 250 points = rank 1, 500 = rank 2)
  rankboundary = 249
  rank = 0
  while score > rankboundary
    rankboundary += 250
    rank += 1
  end
  return rank
end
def pointschange(winner,loser) #calculates how many points should be gained or lost, with clauses to cap the max and min changes at 25 and 5, respectively.
  x = 15 + (loser - winner) * 2
  if x > 25
    x = 25
    puts "Overscore Clause - points change capped at 25"
  elsif x < 5
    x = 5
    puts "Underscore clause - points change capped at 5"
  end
  return x
end
#potentially add a method for 'name.nil?' - used a lot

#----------FRONTEND----------

while loop != true

  puts "What would you like to do?"
  puts "-- 'display' - Display all recorded players, scores and ranks"
  puts "-- 'battle' - Record a battle between players, and update their scores"
  puts "-- 'add' - Add a player"
  puts "-- 'delete' - Delete a player"
  puts "-- 'update' - Update a player's name or score"
  choice = gets.chomp.downcase

  case choice
    when "display"
      playerscores.each { |player,score| 
        puts "#{player}: #{score}, rank #{rankcalc(score)}"
      }

    when "battle"
      #setting variables
      puts "Who won the battle?"
      winner = gets.chomp.capitalize
      if playerscores[winner.to_sym].nil?
        puts "Player not found!"
        next
      else
        winnerrank = rankcalc(playerscores[winner.to_sym])
      end

      puts "Who lost the battle?"
      loser = gets.chomp.capitalize
      if playerscores[loser.to_sym].nil?
        puts "Player not found!"
        next
      else
        loserrank = rankcalc(playerscores[loser.to_sym])
      end

      #battle calculations
      puts "-----------------"
      change = pointschange(winnerrank,loserrank)
      puts "#{winner}'s rank is #{winnerrank}, and #{loser}'s rank is #{loserrank}, therefore:"
      #updating scores
      playerscores[winner.to_sym] += change
      playerscores[loser.to_sym] -= change
      puts "#{winner} gained #{change} points, and #{loser} lost #{change} points."

      if playerscores[loser.to_sym] < 0 #negative score check
        playerscores[loser.to_sym] = 0
        puts "#{loser}'s points became negative, so were reset to 0."
      end
      #checking for changes to ranks
      newwinnerrank = rankcalc(playerscores[winner.to_sym])
      newloserrank = rankcalc(playerscores[loser.to_sym])
      if newwinnerrank > winnerrank
        puts "#{winner}'s rank increased to #{newwinnerrank}."
      end
      if newloserrank < loserrank
        puts "#{loser}'s rank decreased to #{newloserrank}."
      end

    when "add"
      puts "What is the player's name?"
      playername = gets.chomp.capitalize
        if playerscores[playername.to_sym].nil?
          puts "What is their score?"
          score = gets.chomp
          playerscores[playername.to_sym] = score.to_i
          puts "#{playername} has been added with a score of #{score}."
        else
          puts "#{playername} already exists! Their score is #{playerscores[playername.to_sym]}."
        end
    when "delete"
      puts "Which player would you like to delete?"
      playername = gets.chomp.capitalize
      if playerscores[playername.to_sym].nil?
        puts "Player not found!"
      else
        playerscores.delete(playername.to_sym)
        puts "#{playername} has been removed."
      end
      
    when "update"
      puts "Would you like to update a player name or a score?"
      puts "-- 'player'"
      puts "-- 'score'"
      updatechoice = gets.chomp.downcase
      case updatechoice
        when "player"
          puts "Which player would you like to update?"
          oldname = gets.chomp.capitalize
          if playerscores[oldname.to_sym].nil?
            puts "Player not found!"
          else
            puts "What is their new name?"
            newname = gets.chomp.capitalize
            #I couldn't seem to find a direct way to update a key in a hash, so I have opted for creating a new one using the value of the old, then deleting the old key, this will be updated if a way to update the key is possible
            playerscores[newname.to_sym] = playerscores[oldname.to_sym]
            playerscores.delete(oldname.to_sym)

            puts "player #{oldname} has been updated to #{newname}, retaining score #{playerscores[newname.to_sym]}" # 'retaining a score of x' acts as verification the update to the new key was successful
          end

        when "score"
          puts "Which player would you like to update?"
          playername = gets.chomp.capitalize
          puts "What is the new score?"
          newscore = gets.chomp.capitalize
          playerscores[playername.to_sym] = newscore.to_i

          puts "#{playername}'s score has been updated to #{playerscores[playername.to_sym]}"

        else
          puts "Invalid response!"
        end
    when "kill" #to break loop during testing
      break
    else
      puts "Invalid response!"
    end
  puts "-----------------"
end
